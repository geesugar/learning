h1. Linux进程状态详解

{toc:printable=true|style=square|maxLevel=3|indent=20px|minLevel=1|class=bigpink|exclude=[1//2]|type=list|outline=clear|include=.*}

h2. 概述

Linux内核通过精心设计的状态机制来管理进程的生命周期。本文档重点介绍与CFS（完全公平调度器）调度器相关的进程状态，以及这些状态之间的转换关系。

h2. 核心进程状态定义

h3. 1. 基本运行状态

Linux内核在{{include/linux/sched.h}}中定义了以下主要进程状态：

{code:language=c|title=进程状态定义|borderStyle=solid}
/* 核心状态位 */
#define TASK_RUNNING            0x0000    /* 运行状态 */
#define TASK_INTERRUPTIBLE      0x0001    /* 可中断睡眠 */
#define TASK_UNINTERRUPTIBLE    0x0002    /* 不可中断睡眠 */
#define __TASK_STOPPED          0x0004    /* 任务被停止 */
#define __TASK_TRACED           0x0008    /* 任务被跟踪 */

/* 特殊状态 */
#define TASK_WAKING             0x0200    /* 正在唤醒 */
#define TASK_NEW                0x0800    /* 新创建任务 */
#define TASK_PARKED             0x0040    /* 任务被挂起 */

/* 退出状态 */
#define EXIT_ZOMBIE             0x0020    /* 僵尸进程 */
#define EXIT_DEAD               0x0010    /* 进程已死亡 */
{code}

h3. 2. 状态显示字符映射

在{{/proc/[pid]/stat}}和ps命令中，进程状态用单个字符表示：

|| 字符 || 状态名称 || 含义 ||
| R | running | 运行或就绪状态 |
| S | sleeping | 可中断睡眠 |
| D | disk sleep | 不可中断睡眠 |
| T | stopped | 被停止 |
| t | tracing stop | 被跟踪停止 |
| Z | zombie | 僵尸进程 |
| P | parked | 挂起状态 |
| I | idle | 空闲状态 |

h2. 与CFS调度器相关的状态详解

h3. 1. TASK_RUNNING（运行状态） - 'R'

*定义*: 进程准备好运行或正在运行

*特点*:
* 这是*唯一可被调度器选择执行的状态*
* 包含了传统操作系统理论中的"运行态"和"就绪态"
* 进程可能在CPU上执行，也可能在运行队列中等待

*内核判断*:
{code:language=c}
#define task_is_running(task) (READ_ONCE((task)->__state) == TASK_RUNNING)
{code}

*CFS调度器中的细分*:
* {{on_cpu = 1}}: 进程正在CPU上执行
* {{on_cpu = 0, on_rq = TASK_ON_RQ_QUEUED}}: 进程在就绪队列中等待调度

h3. 2. TASK_INTERRUPTIBLE（可中断睡眠） - 'S'

*定义*: 进程因等待某个条件而进入睡眠，可被信号中断

*常见场景*:
* 等待I/O操作完成
* 等待网络数据包
* 等待用户输入
* 等待锁资源

*唤醒机制*:
{code:language=c|title=睡眠和唤醒机制}
/* 设置睡眠状态 */
set_current_state(TASK_INTERRUPTIBLE);
schedule();

/* 唤醒进程 */
wake_up_process(task);  // 将状态设置为TASK_RUNNING
{code}

h3. 3. TASK_UNINTERRUPTIBLE（不可中断睡眠） - 'D'

*定义*: 进程在等待硬件条件，不能被信号中断

*重要性*:
* 用于关键的I/O操作
* 过多的D状态进程通常指示系统存在问题
* 不响应SIGKILL信号

*典型场景*:
* 磁盘I/O等待
* NFS网络文件系统操作
* 设备驱动程序中的等待

{warning:title=重要提醒}
过多的D状态进程可能表示系统存在I/O瓶颈或驱动程序问题，需要重点关注。
{warning}

h3. 4. TASK_WAKING（正在唤醒） - 临时状态

*定义*: 进程正在被唤醒的过渡状态
*作用*: 防止并发唤醒导致的竞争条件
*持续时间*: 非常短暂，用户态几乎不可见

h2. 进程状态转换图

!images/linux_process_state_transition.png|thumbnail!

_图：Linux进程状态转换关系图，展示了与CFS调度器相关的核心状态及其转换条件_

h2. CFS调度器中的状态管理

h3. 1. 进程入队和出队

{code:language=c|title=CFS调度器状态管理|borderStyle=solid}
/* 进程从睡眠状态唤醒 - 入队到CFS运行队列 */
static void enqueue_task_fair(struct rq *rq, struct task_struct *p, int flags)
{
    struct cfs_rq *cfs_rq;
    struct sched_entity *se = &p->se;
    
    /* 将调度实体添加到CFS红黑树 */
    enqueue_entity(cfs_rq, se, flags);
    
    /* 更新运行队列统计信息 */
    cfs_rq->nr_running++;
}

/* 进程睡眠 - 从CFS运行队列移除 */
static void dequeue_task_fair(struct rq *rq, struct task_struct *p, int flags)
{
    struct cfs_rq *cfs_rq;
    struct sched_entity *se = &p->se;
    
    /* 从CFS红黑树移除调度实体 */
    dequeue_entity(cfs_rq, se, flags);
    
    /* 更新运行队列统计信息 */
    cfs_rq->nr_running--;
}
{code}

h3. 2. 状态转换的时机

*睡眠转换*:
{code:language=c|title=典型睡眠模式}
/* 典型的睡眠模式 */
for (;;) {
    set_current_state(TASK_INTERRUPTIBLE);
    if (condition_met())
        break;
    schedule();  /* 让出CPU，触发调度 */
}
__set_current_state(TASK_RUNNING);
{code}

*唤醒转换*:
{code:language=c|title=进程唤醒机制}
/* 唤醒等待的进程 */
int try_to_wake_up(struct task_struct *p, unsigned int state, int wake_flags)
{
    /* 设置进程状态为TASK_RUNNING */
    WRITE_ONCE(p->__state, TASK_RUNNING);
    
    /* 将进程添加到运行队列 */
    enqueue_task(rq, p, ENQUEUE_WAKEUP);
    
    /* 检查是否需要抢占当前进程 */
    check_preempt_curr(rq, p, wake_flags);
    
    return 1;
}
{code}

h2. 状态查询和调试

h3. 1. 查看进程状态

{code:language=bash|title=进程状态查询命令}
# 查看所有进程状态
ps aux

# 查看特定进程详细状态
cat /proc/[pid]/status

# 查看系统中不同状态的进程数量
ps aux | awk '{print $8}' | sort | uniq -c
{code}

h3. 2. 调试命令

{code:language=bash|title=内核调试命令}
# 显示所有进程的状态（内核调试）
echo t > /proc/sysrq-trigger

# 查看调度器统计信息
cat /proc/sched_debug

# 查看特定进程的调度信息
cat /proc/[pid]/sched
{code}

h2. 性能优化考虑

h3. 1. 状态转换开销

* *频繁的睡眠/唤醒*: 会增加调度器开销
* *长时间D状态*: 可能导致系统响应性问题
* *过多的运行态进程*: 会增加调度延迟

h3. 2. CFS调度器优化

* *批量唤醒*: 减少频繁的状态转换
* *亲和性调度*: 减少跨CPU的状态迁移
* *组调度*: 通过cgroup管理进程状态优先级

{info:title=性能提示}
合理的进程状态管理对系统性能至关重要。通过监控不同状态的进程数量，可以及时发现性能瓶颈。
{info}

h2. 总结

Linux进程状态机制是内核进行任务管理的基础，CFS调度器只调度{{TASK_RUNNING}}状态的进程。理解这些状态及其转换关系对于：

# *系统调优*: 识别性能瓶颈
# *问题诊断*: 分析系统响应问题
# *应用开发*: 编写高效的并发程序
# *内核开发*: 理解调度器工作原理

{note:title=核心要点}
*只有处于TASK_RUNNING状态的进程才能被CFS调度器选中执行*，其他所有状态都表示进程因某种原因无法运行。
{note}

----

{panel:title=文档信息|borderStyle=dashed|borderColor=#ccc|titleBGColor=#f7f7f7|bgColor=#ffffce}
* *基于*: Linux 5.15 内核源码
* *重点*: CFS调度器相关进程状态
* *格式*: Confluence Wiki Markup
* *创建时间*: 2024年
{panel} 